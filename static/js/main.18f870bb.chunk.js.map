{"version":3,"sources":["components/ChampionRandomizer/PlayerRow.js","components/ChampionRandomizer/ChampionResults.js","components/ChampionRandomizer/index.js","util/util.js","components/App.js","serviceWorker.js","index.js"],"names":["PlayerRow","_this$props$player","this","props","player","playerNumber","picks","ban","react_default","a","createElement","className","Component","ChampionResults","players","map","index","ChampionRandomizer_PlayerRow","key","toString","textArea","document","text","Array","from","querySelectorAll","el","textContent","join","value","body","appendChild","select","execCommand","removeChild","_this","Fragment","renderPlayers","results","backups","onClick","copyToClipboard","ChampionRandomizer","ChampionRandomizer_ChampionResults","wait","timeout","Promise","resolve","setTimeout","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","numPlayers","numPicks","numBackups","champions","fetch","response","json","version","concat","keys","data","fetchVersion","fetchChampions","_this$state","array","temporaryValue","randomIndex","currentIndex","slice","length","Math","floor","random","shuffle","_","pop","setState","components_ChampionRandomizer","randomize","bind","Boolean","window","location","hostname","match","ReactDOM","render","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18f870bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PlayerRow extends Component {\n  render() {\n    let { playerNumber, picks, ban } = this.props.player;\n    return (\n      <div className=\"ChampionResults-row\">\n        <b>PLAYER {playerNumber}:</b> Pick {picks} // Ban {ban}\n      </div>\n    );\n  }\n}\n\nexport default PlayerRow;\n","import React, { Component } from 'react';\nimport PlayerRow from './PlayerRow';\n\nclass ChampionResults extends Component {\n  renderPlayers(players) {\n    return players.map((player, index) => {\n      return <PlayerRow key={index.toString()} player={player} />;\n    });\n  }\n\n  copyToClipboard() {\n    let textArea = document.createElement('textarea');\n    let rowElements = Array.from(document.querySelectorAll('.ChampionResults-row'));\n    let text = rowElements.map(el => el.textContent).join('\\n');\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"ChampionResults\">\n          {this.renderPlayers(this.props.results.players)}\n          \n          <div className=\"ChampionResults-row\"><b>BACKUPS:</b> {this.props.results.backups}</div>\n        </div>\n        <div>\n          <button \n            className=\"ChampionResults-copy-button\" \n            onClick={() => this.copyToClipboard()}>\n            Copy to Clipboard\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ChampionResults;\n","import React, { Component } from 'react';\nimport ChampionResults from './ChampionResults';\n\nclass ChampionRandomizer extends Component {\n  \n  render() {\n    let results;\n    if (this.props.results !== null) {\n      results = <ChampionResults results={this.props.results} />\n    } else {\n      results = null;\n    }\n    return (\n      <>\n        <div>\n          <button className=\"ChampionRandomizer-button\" onClick={() => this.props.onClick()}>\n            Randomize\n          </button>\n        </div>\n        {results}\n      </>\n    )\n    \n  }\n}\n\nexport default ChampionRandomizer;\n","export function shuffle(array) {\n  array = array.slice();\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport function wait(timeout) {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n}\n","import React, { Component } from 'react';\nimport ChampionRandomizer from './ChampionRandomizer/index';\nimport { shuffle, wait } from '../util/util';\nimport '../styles/App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { results: null, numPlayers: 3, numPicks: 2, numBackups: 8 };\n    this.champions = null;\n  }\n\n  async fetchVersion() {\n    const response = await fetch('https://ddragon.leagueoflegends.com/api/versions.json');\n    const json = await response.json();\n    return json[0];\n  }\n\n  async fetchChampions(version) {\n    const response = await fetch(`http://ddragon.leagueoflegends.com/cdn/${version}/data/en_US/champion.json`);\n    const json = await response.json();\n    return Object.keys(json.data);\n  }\n\n  async componentDidMount() {\n    let version = await this.fetchVersion();\n    let champions = await this.fetchChampions(version);\n    this.champions = champions;\n  }\n\n  randomize() {\n    let { numPicks, numPlayers, numBackups } = this.state;\n\n    // Make sure the API requests have completed (there's probably a better way to do this...)\n    while (this.champions === null) {\n      wait(100);\n    }\n\n    // Shuffle the champs every time the button is clicked\n    let champions = shuffle(this.champions);\n\n    // Create \"player objects\" that contains picks, ban, and player number\n    let players = Array.from(Array(numPlayers)).map((_, index) => {\n      let picks = Array.from(Array(numPicks)).map(() => {\n        return champions.pop();\n      }).join(' or ');\n      return {\n        picks,\n        ban: champions.pop(),\n        playerNumber: index + 1\n      };\n    });\n\n    // Create a string consisting of backups\n    let backups = Array.from(Array(numBackups)).map(() => {\n      return champions.pop();\n    }).join(', ');\n\n    let results = { players, backups };\n    this.setState({ results });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>ORACLE</h1>\n          <h4>Let us join together and pray to RNGesus</h4>\n        </header>\n        <section>\n          <ChampionRandomizer \n            results={this.state.results}\n            onClick={this.randomize.bind(this)}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}